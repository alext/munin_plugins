#!/usr/bin/env ruby

if $0 =~ /^(?:|.*\/)http_([^_]+)_/
  host = $1
end
abort "# Error: couldn't understand what I'm supposed to monitor." unless host

password = ENV['password'] || 'user'

if (ARGV[0] == 'config')
  puts "host_name #{host}" unless host == 'localhost'

  # puts config details

  exit 0
end

require 'net/http'
require 'rexml/document'

class SuperhubStats

  def initialize(host, password)
    @host = host
    @password = password
  end

  def acquisition_status
    table = get_table('Modem Initialisation')
    get_row_value(table, 'Downstream Acquisition')
  end

  def downstream_channel_status
    table = get_table('Downstream Channels')
    table.get_elements(".//tbody//td[1]").map(&:text)
  end

  def post_rs_errors
    table = get_table('Downstream Channels')
    table.get_elements(".//tbody//td[8]").map(&:text).map(&:to_i)
  end

  def stats_page
    @stats_page ||= REXML::Document.new(load_stats_page)
  end

  private

  def get_table(caption)
    stats_page.get_elements("//table[.//caption[contains(., '#{caption}')]]").first
  end

  def get_row_value(table, row_title)
    table.get_elements(".//tr[.//td[@class='title'][contains(., '#{row_title}')]]//td[2]").first.text
  end

  def load_stats_page
    @page = get_stats_page
    unless @page =~ /Network Status/
      login
    end
    @page
  end

  def login
    uri = URI.parse("http://#{@host}#{login_path}")
    resp = Net::HTTP.post_form(uri, "VmLoginPassword" => @password)
    unless resp['Location'] =~ %r{/home.asp}
      raise "Login failed"
    end
    @page = get_stats_page
    unless @page =~ /Network Status/
      raise "Login process failed"
    end
  end

  def login_path
    if @page =~ %r{<form\s+id="signIn"\s+action=(\S+)}
      return $1
    else
      puts @page
      raise "Couldn't find login form"
    end
  end

  def get_stats_page
    Net::HTTP.get(@host, '/VmRgNetworkStatus.asp')
  end
end

stats = SuperhubStats.new(host, password)

puts "Status: #{stats.acquisition_status}"
puts stats.downstream_channel_status.inspect
puts stats.post_rs_errors.inspect

# puts graph data
